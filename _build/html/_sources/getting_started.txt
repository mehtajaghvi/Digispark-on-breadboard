Digispark
=========

.. contents::

.. section-numbering::

.. raw:: pdf

   PageBreak oneColumn

.. footer::
   
  
   Aakash Project, IIT Bombay 


* What is arduino?

 Arduino is an open-source electronics prototyping platform. It's intended for artists, designers, hobbyists and anyone interested in creating interactive objects or environments but             tad too expensive ($15) for small projects or if you are new to electronics.We started exploring Digispark project which has developed a 9$ ATtiny-85 Arduino compatible board.  
 We have redesigned PCB of Digispark to fit in single layer and optimized components to reduce cost to less than 3$.

* Difference between arduino and digispark ?

 +  ArduinoUNO uses ATmega328 microcontroller with 32Kb of flash memory of which 5Kb is used by the bootloader whereas Digispark has 8Kb of flash memory with 2Kb occupied by   bootloader,so you have around 6Kb of memory left for code.

 +------------------------+------------+----------+                                     
 |       Memory           | Digispark  |ArduinoUNO| 		                      
 |                        |            |          |         			
 +========================+============+==========+
 |Flash(Total)            | 8k bytes   |32k bytes | 
 +------------------------+------------+----------+
 |Flash(Bootloader)       |  2k bytes  |5k bytes  |         
 +------------------------+------------+----------+
 |Static RAM              | 512 byte   |2k bytes  |         
 +------------------------+------------+----------+
 |EEPROM                  |  512 byte  |1k byte   |          
 +------------------------+------------+----------+

 +------------------------+------------+----------+                                     
 |       PINS             | Digispark  |ArduinoUNO| 		                      
 |                        |            |          |         			
 +========================+============+==========+
 |Total                   |8           |32        | 
 +------------------------+------------+----------+
 |Total I/O               |6           |23        |         
 +------------------------+------------+----------+
 |Digital I/O   (PWM)     |6  (3)      |16 (6)    |         
 +------------------------+------------+----------+
 |Analog  I/O             |4           |6         |          
 +------------------------+------------+----------+
   	
 
* What is digispark ?

 + Digispark is an **ATtiny85** based microcontroller development board come with USB interface.
 + It uses the familiar Arduino IDE for development.
 + PWM on 3 pins 
 + ADC on 4 pins
 + I²C and SPI (vis USI)
 + 6 I/O pins (2 are used for USB only if your program actively communicates over USB, otherwise you can use all 6 even if you are programming via USB)
 + 8 KB flash memory (about 6 KB after bootloader)

* Why digispark ?

 It is micro-sized, Arduino enabled, usb development board - cheap enough to jumpstart electronics.



* How serial communication occurs ?

 Pin 3 and Pin 4 (P3 and P4) are used for USB communication and programming, while you can use them in your circuit if you are not using USB communication, you may have to unplug your   circuit during programming if the circuit would impede the pin states or dramatically affect the voltage levels on these pins.
 Pin 3 (P3) has a 1.5 kΩ pull-up resistor attached to it which is required for when P3 and P4 are used for USB communication (including programming). Your design may need to take into  account that you'd have to overpower this to pull this pin low.
 The Digispark does not have a hardware serial port nor a hardware serial to USB converter. An example library (DigiUSB) is provided, as well as some example code and a serial monitor     like program, but communication with the computer will not always be plug and play, especially when other libraries are involved.


* At what clock speed Digispark works?

 16.5mhz is a better clock speed closer to 16.0mhz which is more useful with existing arduino libraries. It must be using the high speed PLL at 16MHz and not the internal RC    oscillator and the safe voltage is 3.8V or more for this speed.

* What if my code is more than 6 K?



* How bootloader works ?

* Whats is cdc232.hex ?

* USB-HID device

* Can digispark act as a USB-host?

* What all can it  do ?

* what is its cost ?

* How to programme it ?

* What all components are required ?

* Can we use chip other than ATtiny85 ?

* How much memory is available to code ?

* Can I use it in other OS ?

* Tutorials

* What is micronucelus.hex?

Hardware requirement
--------------------
All you need is:

**One** Attiny85-20PU

.. warning:: Please make sure your ATtiny85 is the 20 variety, and not an ATtiny85v-10. The v version is low voltage and is totally out of spec for USB stuff like the micronucleus bootloader.

.. image:: /home/jaghvi/github/Digispark-on-breadboard/images/attiny85_pinout.png :scale: 250% :height: 50 :width: 50

**Two** 3.6V Zener Diode

 **Zener diodes**:Power rating is critical, but not in the way you might expect.Most of the time it's perfectly safe to overrate your parts and use a component with a higher rating  than required for this particular circuit. However, in this case that approach can actually prevent the circuit from working because the trade-off in Zener diode design is that as its   power rating increases it also exhibits more capacitance. Capacitance on a high-speed data line is very bad and needs to be avoided or the circuit simply won't work. In practice, a  1/4W Zener should work fine; a 1/2W Zener should work, but is a bit on the borderline; and a 1W Zener almost certainly won't work it will have too much capacitance.

 It's a simple circuit USB socket gets its +5V power line from the usual place, and the 3.3V data lines use three resistors and two **3.6V** 1/4W Zeners to reduce the Arduino's 5V to  3.3V. 
 Purpose of zener diode is essential for the circuit.Even though the power supply line is 5v,communication line work at nominal 3.3 v.The D- and D+ lines are dependent signalling  lines unlike tx ,rx in RS232 .They are half  duplexed diferrential signalling pair helping the USB to run at high data speeds by reducing the effects of electrical noise.


**Three** resistors 

- One 1.5K ohm
- TWO 68 ohm

Broken USB-A cable if you don't have the PCB and you plan to make it on a breadboard.

Programming your chip
=====================
Arduino as ISP
--------------
#. `arduinoIDE <http://arduino.cc/en/Main/Software>`_ Arduino IDE to use arduino-UNO as ISP to program ATtiny85 chip.
#. Plug in your arduino board 
#. File-->Examples-->ArduinoISP
#. Tools-->Board-->Arduino UNO 
#. Tools-->Serial Port-->/dev/ttyACM0

.. note:: Serial Port may be /dev/ttyACM1 

Programming ATTiny85 with Arduino
---------------------------------
#. To know more about SPI protocol `here <http://www.google.com/url?q=http%3A%2F%2Fpdp11.byethost12.com%2FAVR%2FArduinoAsProgrammer.htm&sa=D&sntz=1&usg=AFQjCNE7KJzWFBbjRhLtpMYrmUypxO8VHQ>`_

 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/ArduinoISP_attiny85.png
    :scale: 250%	
    :height: 50 	
    :width: 50


.. warning:: If you are programming with Arduino UNO then use a **10uF** capacitor between RESET and GND of arduino UNO.

#. `Why do you need a capacitor <http://forum.arduino.cc/index.php/topic,104435.0.html>`_

#. To check if connections are proper before burning hex file 

.. note:: change the port to your port /dev/ttyACM* or /dev/ttyUSB* 

Run this command and see that the signature match that of Attiny85 (**0x1e930b**) ::

	avrdude -p attiny85 -c arduino -b 19200 -P /dev/ttyACM0 

Burning micronucleus.hex and setting fuses
------------------------------------------
* `Bootloader <https://github.com/Bluebie/micronucleus-t85/>`_ 

 - Burn the latest version.
 - Depending on your need(jumper version to remove 5 seconds delay).
   More about this as we proceed.


**Upload the BOOTLOADER**
~~~~~~~~~~~~~~~~~~~~~~~~~~
Before you start anything , there are two versions of bootloader.

* **First** (NORMAL) is : micronucleus-1.06.hex . This is the conventional bootloader which comes with the official DS.In this version of bootloader you have to wait for 5sec for your already written programme to start executing.Within this 5sec the DS checks wether you have some other programme to overwrite already existing programme on the chip,If not it starts the programme already uploaded after a **5 seconds** delay.

* **Second** (JUMPER) : Now if every second is crucuial to your project and you can't wait for your programme to start after 5 seconds ,there is this another version micronucleus-1.06-jumper-v2-upgrade.hex


Uploading the NORMAL version
+++++++++++++++++++++++++++++

Go to directory where exists micronucleus-t85 folder and run the following ::

	avrdude -P /dev/ttyACM0 -b 19200 -c arduino -p t85 -U  flash:w:"micronucleus-t85-master/firmware/releases/micronucleus-1.06.hex"



Uploading the JUMPER version
++++++++++++++++++++++++++++

#. Upload micronucleus1.06-jumper-v2-upgrade.hex ::

	avrdude -P /dev/ttyACM0 -b 19200 -c arduino -p t85 -U  flash:w:"micronucleus-t85-master/firmware/releases/micronucleus-1.06.hex"

Set fuses of the attiny85-20PU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

Now just like bootloader versions we have two different fuse settings as well

**First** In case you want to 6 I/O including reset pin (reset pin enabled).You get 6 I/O but at a cost that you can't reprogramme your chip using any ISP programmer now.
You can use this setting for **both** bootloader versions ,Normal as well as Jumper version.


**Second** In this case you can still programme your chip using ISP programmer but you will have just 5 I/O excluding reset pin(reset pin disabled).
These fuse settings **won't** work with Jumper version of bootloader.Jumper version required a jumper between the resest pin and GND to upload the programme.


Fuse setting(Reset **disabled** as I/O)
++++++++++++++++++++++++++++++++++++++++

 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/resetdisabled.png
    :scale: 250%	
    :height: 50 	
    :width: 50

.. note:: These fuses setting will not enable reset pin (ATTINY85 pin 1) as I/O, so you only have 5 I/O instead of 6 I/O ::

	avrdude -P /dev/ttyACM0 -b 19200 -c arduino -p t85 -U lfuse:w:0xe1:m -U hfuse:w:0xdd:m -U efuse:w:0xfe:m


Fuse setting(Reset **enabled** as I/O)
+++++++++++++++++++++++++++++++++++++++
	
 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/resetenabled.png
    :scale: 250%	
    :height: 50 	
    :width: 50

.. warning:: You can't reprogramme your IC with an ISP programmer until you have High volt fuse resetter if you use the above fuse settings as reset pin is enabled as I/O 

#. Set fuses to enable the reset pin to be used as I/O  lfuse:0xe1	**hfuse:0x5d** efuse:0xfe ::
	avrdude -P /dev/ttyACM0 -b 19200 -c arduino -p t85 -U lfuse:w:0xe1:m -U hfuse:w:0x5d:m -U efuse:w:0xfe:m


#. Now if you are done with the above two steps you are ready to programme.

After the above two steps are accomplished ,make all the USB connections and follow the next step.

USB Connections
===============

Mistakes while assembling the circuit
-------------------------------------


 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/digispark_breadboard_bb.jpg
    :scale: 250%	
    :height: 50 	
    :width: 50

Device Detection
----------------

run command **dmesg** or **tailf /var/log/syslog** in terminal to check the vendorID and productID
 
 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/devicedetected.png
     :scale: 250%	
     :height: 50 	
     :width: 50


Setting rules in udev to avoid errors
-------------------------------------

`Udev rules setting <https://github.com/Bluebie/micronucleus-t85/wiki/Ubuntu-Linux>`_ 

#. /etc/udev/rules/49-micronucelus.rules

#. /etc/udev/rules/90-digispark.rules

#. /etc/udev/rules/99-digiusb.rules

ERRORS encountered
------------------

Error when using ISP
~~~~~~~~~~~~~~~~~~~~

.. note::  All the errors encountered in avrdude is mainly due to poor connections between ISP programmer and ATtiny85
           Redo your connections and see that no wire is loose.

#. **Error**
	avrdude: please define PAGEL and BS2 signals in the configuration file for part ATtiny85
	avrdude: AVR device initialized and ready to accept instructions

	Reading | ################################################## | 100% 0.02s

	avrdude: Device signature = 0x000000
	avrdude: Yikes!  Invalid device signature.
		 Double check connections and try again, or use -F to override
		 this check.

#. **Error**

.. note::  If baud rate is note set properly then stk500 error is encountered.
	This error also occours if capacitor is not used in case you are programming with Arduino UNO.

	avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x14

	avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x01
	avrdude: stk500_initialize(): (a) protocol error, expect=0x14, resp=0x10
	avrdude: initialization failed, rc=-1
		 Double check connections and try again, or use -F to override
		 this check.

#. **Error**
	avrdude: stk500_getsync(): not in sync: resp=0xe0


Errors in USB connection
~~~~~~~~~~~~~~~~~~~~~~~~

#. **Error**
	If 90-digispark.rules not found in /etc/udev/rules.d/

	Abort mission! -1 error has occured ...
	>> Please unplug the device and restart the program.

#. **Error**

Run **dmesg** or **tailf /var/log/syslog** .Following error might occur due to number of reasons.
If you have used a faulty resistor value or if the zener diodes used are of values other than 3.6V then following occurs. Check if all the connections are proper specially consulting D- and D+ lines. 

 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/error_usbconnection.png
    :scale: 250%	
    :height: 50 	
    :width: 50

#. **Error**

> Please plug in the device ... 

> Press CTRL+C to terminate the program.

If you try to burn cdc232.hex or any other hex file  via arduinoISP or any other ISP programmer the above error occurs.This is because once the bootloader is burn on chip ,the fuses disable the reset pin thus preventing any other hex file to be programmed on chip by an ISP programmer.


Burn cdc232.hex 
---------------
#. Go to micronucleus-t85-master folder downloaded from ` here <https://github.com/Bluebie/micronucleus-t85/>`_
#. In /micronucleus-t85-master/commandline/ folder run **make**
#. A **micronucleus** binary is formed 
#. To enumerate digispark as USB serial device run this command ::

sudo ./micronucleus micronucleus-t85-master/commandline/cdc232.hex

run command **dmesg** in terminal to enumerate the device as /dev/ttyACM*

usb 2-1.2: >new low-speed USB device number 87 using ehci_hcd
usb 2-1.2: >New USB device found, idVendor=16d0, idProduct=0753
usb 2-1.2: >New USB device strings: Mfr=0, Product=0, SerialNumber=0


Uploading Programme
-------------------

* `DigisparkIDE <http://digistump.com/wiki/digispark/tutorials/connecting>`_ ArduinoIDE integrated with Digispark libraries required to run programs on your DIY project.

(Normal Version of Bootloader)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 
#. Board--->Digispark(TinyCore)

#. Programmer--->Digispark

..note:: **DO NOT** plug the device until asked

* Click Compile the code to check if the code exceeds 6Kb


#. Click Upload (IDE will ask to plug int the device within sixty seconds)

 .. image:: /home/jaghvi/github/Digispark-on-breadboard/images/upload_successful.png
      :scale: 120%	
      :height: 50 	
      :width: 50

#. Now Plug Digispark


(Jumper Version of Bootloader)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Board--->Digispark(TinyCore)

#. Programmer--->Digispark

#. Upload (IDE will ask to plug int the device within sixty seconds)	

#. Connect PB5 to GND using a jumper if you need to upload sketch.

#. Plug Digispark

#. Micronucleus thankyou.

#. Done

#. Now deplug your device , remove the jumper wire between reset pin and GND , and replug the device , Your programme will start executing instantaneously **without 5 seconds** delay. 

Serial Monitor
--------------

You can either use Digisparks official monitor or use Bluebie's digiterm written in ruby.

#. `Digiterm: <http://digistump.com/wiki/digispark/tutorials/digiusb>`_ Digispark Serial Monitor

#. The Digispark integrated arduinoIDE has DigiUSB libraries which has the DigiUSB monitor working like digiterm.

DigiUSB monitor has two more binaries send and receive.
Run ./receive >> output.txt and your data will be written in a text file.

Suggested LINKS
---------------

#. `ATtiny85 datasheet <http://www.atmel.com/images/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf>`_

#. `ArduinoISP Tutorial <http://www.google.com/url?q=http%3A%2F%2Fpdp11.byethost12.com%2FAVR%2FArduinoAsProgrammer.htm&sa=D&sntz=1&usg=AFQjCNE7KJzWFBbjRhLtpMYrmUypxO8VHQ>`_

#. `Tutorial <http://digistump.com/wiki/digispark/tutorials/basics>`_

#.  `Digispark Forum <http://digistump.com/board/index.php>`_

#. `SPI Protocol <http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus>`_

#. `Arduino <http://www.arduino.cc/>`_

 